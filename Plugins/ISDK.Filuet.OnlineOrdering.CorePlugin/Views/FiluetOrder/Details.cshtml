@model OrderDetailsModel

@{
    if (!Model.PrintMode)
    {
        Layout = "~/Views/Shared/_ColumnsOne.cshtml";
    }
    else
    {
        Layout = "~/Views/Shared/_Print.cshtml";
    }
    //title
    NopHtml.AddTitleParts(T("PageTitle.OrderDetails").Text);
    //page class
    NopHtml.AppendPageCssClassParts("html-order-details-page");

    string fusionOrderNumber = NopFiluetCommonDefaults.EmptyDisplayPlaceholder;
    string customerName = NopFiluetCommonDefaults.EmptyDisplayPlaceholder;
    string carrier = NopFiluetCommonDefaults.EmptyDisplayPlaceholder;
    string zip = NopFiluetCommonDefaults.EmptyDisplayPlaceholder;
    string country = NopFiluetCommonDefaults.EmptyDisplayPlaceholder;
    string city = NopFiluetCommonDefaults.EmptyDisplayPlaceholder;
    string address = NopFiluetCommonDefaults.EmptyDisplayPlaceholder;
    string postamatId = NopFiluetCommonDefaults.EmptyDisplayPlaceholder;
    string fullName = NopFiluetCommonDefaults.EmptyDisplayPlaceholder;
    string phoneNumber = NopFiluetCommonDefaults.EmptyDisplayPlaceholder;
    string timeSlot = NopFiluetCommonDefaults.EmptyDisplayPlaceholder;
    var comment = "";
    OrderStatusDto[] orderStatusDtos = null;

    string invoiceShippingInfo = NopFiluetCommonDefaults.EmptyDisplayPlaceholder;
    FiluetOrderTotalsModel totals = null;
    FiluetOrderDetailsModel extendedModel = Model as FiluetOrderDetailsModel;
    if (extendedModel != null)
    {
        totals = extendedModel.OrderTotals;
        customerName = extendedModel.CustomerName;
        fusionOrderNumber = extendedModel.FusionOrderId;
        carrier = extendedModel.DeliveryOperator;
        zip = extendedModel.ShipToZipcode;
        country = extendedModel.ShipToCountryCode;
        city = extendedModel.ShipToCity;
        address = extendedModel.ShipToAddress;
        postamatId = extendedModel.ShipToPostamatId;
        fullName = extendedModel.ShipToFullname;
        phoneNumber = extendedModel.ShipToPhone;
        timeSlot = extendedModel.ShipToTimeslot;
        invoiceShippingInfo = extendedModel.IsShipInvoiceWithOrder ? T("Order.IsShipInvoiceWithOrderYes").ToHtmlString() : T("Order.IsShipInvoiceWithOrderNo").ToHtmlString();
        comment = extendedModel.Comment;
        orderStatusDtos = extendedModel.OrderStatusDtos?.ToArray();
    }
    IStoreContext storeContext = EngineContext.Current.Resolve<IStoreContext>();
    string storeName = storeContext.GetCurrentStore().Name;

    string welcomeMessage = string.Format(T("Order.DetailsWelcomeTemplate").ToHtmlString(), customerName);
    string thankYouMessage = string.Format(T("Order.DetailsThankYouTemplate").ToHtmlString(), storeName);
}
@if (Model.PrintMode)
{
    <script asp-location="Footer">
        $(document).ready(function () {
            window.print();
        });
    </script>
}
<div class="page order-details-page">
    @if (!Model.PrintMode)
    {
        <div class="page-title">
            <h1>@T("Order.OrderInformation")</h1>
        </div>
    }
    <div class="page-body">
        <div class="intro-message welcome-message">@welcomeMessage</div>
        <div class="intro-message thankyou-message">@thankYouMessage</div>
        <div class="order-overview">
            <div class="order-date">
                <strong>@T("Order.OrderDate"): @Model.CreatedOn.ToString("D")</strong>
            </div>
            <div class="order-number">
                <strong>@T("Order.FusionOrder#"): @fusionOrderNumber</strong>
            </div>
            <div class="order-overview-content">
                <div class="title">
                    <strong>@T("Order.Shipping")</strong>
                </div>
                <div class="order-carrier">
                    @T("Order.Shipping.Carrier"): @carrier
                </div>
                <div class="order-zip">
                    @T("Order.Shipping.ZipCode"): @zip
                </div>
                <div class="order-country">
                    @T("Order.Shipping.CountryCode"): @country
                </div>
                <div class="order-city">
                    @T("Order.Shipping.City"): @city
                </div>
                <div class="order-address">
                    @T("Order.Shipping.Address"): @address
                </div>
                <div class="order-postamatid">
                    @T("Order.Shipping.PostamatId"): @postamatId
                </div>
                <div class="order-fullname">
                    @T("Order.Shipping.FullName"): @fullName
                </div>
                <div class="order-phone">
                    @T("Order.Shipping.PhoneNumber"): @phoneNumber
                </div>
                <div class="order-timeslot">
                    @T("Order.Shipping.TimeSlot"): @timeSlot
                </div>
                <div class="order-invoice-shipping-info">
                    @T("Order.InvoiceShippingInformation"): @invoiceShippingInfo
                </div>
                <div class="order-comment">
                    @T("HBL.Baltic.OnlineOrdering.DeliveryWidgetPlugin.Labels.Comment"): @comment
                </div>
            </div>
            @if (orderStatusDtos?.Any() == true)
            {
                <div class="title">
                    <strong>@T("Order.Shipping.OrderProcessing")</strong>
                </div>
                <div class="table-wrapper">
                    <table class="data-table">
                        <colgroup>
                            <col width="1" />
                            <col width="1" />
                        </colgroup>
                        <thead>
                            <tr>
                                <th class="name">
                                    @T("Order.Shipping.OrderDateUpdate")
                                </th>
                                <th class="name">
                                    @T("Order.Shipping.OrderStatus")
                                </th>
                            </tr>
                        </thead>
                        <tbody>
                            @foreach (var orderStatusDto in orderStatusDtos)
                            {
                                <tr>
                                    <td class="name">
                                        @orderStatusDto.StatusDate
                                    </td>
                                    <td class="name">
                                        @(string.IsNullOrWhiteSpace(orderStatusDto.Status) ? "--" : orderStatusDto.Status)
                                    </td>
                                </tr>
                            }
                        </tbody>
                    </table>
                </div>
            }
        </div>
        <div class="section products">
            <div class="title">
                <strong>@T("Order.Product(s)")</strong>
            </div>
            <div class="table-wrapper">
                <table class="data-table">
                    <colgroup>
                        @if (Model.ShowSku)
                        {
                            <col width="1" />
                        }
                        <col />
                        <col width="1" />
                        <col width="1" />
                        <col width="1" />
                    </colgroup>
                    <thead>
                        <tr>
                            @if (Model.ShowSku)
                            {
                                <th class="sku">
                                    @T("Order.Product(s).SKU")
                                </th>
                            }
                            <th class="name">
                                @T("Order.Product(s).Name")
                            </th>
                            <th class="price">
                                @T("Order.Product(s).Price")
                            </th>
                            <th class="quantity">
                                @T("Order.Product(s).Quantity")
                            </th>
                            <th class="total">
                                @T("Order.Product(s).Total")
                            </th>
                        </tr>
                    </thead>
                    <tbody>
                        @foreach (var item in Model.Items)
                        {
                            <tr>
                                @if (Model.ShowSku)
                                {
                                    <td class="sku">
                                        <label class="td-title">@T("Order.Product(s).SKU"):</label>
                                        <span class="sku-number">@item.Sku</span>
                                    </td>
                                }
                                <td class="product">
                                    @if (!Model.PrintMode)
                                    {
                                        <em><a href="@Url.RouteUrl("Product", new { SeName = item.ProductSeName })">@item.ProductName</a></em>
                                    }
                                    else
                                    {
                                        @item.ProductName
                                    }
                                    @if (!string.IsNullOrEmpty(item.AttributeInfo))
                                    {
                                        <div class="attributes">
                                            @Html.Raw(item.AttributeInfo)
                                        </div>
                                    }
                                    @if (!string.IsNullOrEmpty(item.RentalInfo))
                                    {
                                        <div class="rental-info">
                                            @Html.Raw(item.RentalInfo)
                                        </div>
                                    }
                                    @if (item.DownloadId > 0)
                                    {
                                        <div class="download">
                                            <a href="@Url.RouteUrl("GetDownload", new { orderItemId = item.OrderItemGuid })">@T("DownloadableProducts.Fields.Download")</a>
                                        </div>
                                    }
                                    @if (item.LicenseId > 0)
                                    {
                                        <div class="download license">
                                            <a href="@Url.RouteUrl("GetLicense", new {orderItemId = item.OrderItemGuid})">@T("DownloadableProducts.Fields.DownloadLicense")</a>
                                        </div>
                                    }
                                    @await Component.InvokeAsync("Widget", new { widgetZone = PublicWidgetZones.OrderDetailsProductLine, additionalData = item.Id })
                                </td>
                                <td class="unit-price">
                                    <label class="td-title">@T("Order.Product(s).Price"):</label>
                                    <span class="product-unit-price">@item.UnitPrice</span>
                                </td>
                                <td class="quantity">
                                    <label class="td-title">@T("Order.Product(s).Quantity"):</label>
                                    <span class="product-quantity">@item.Quantity</span>
                                </td>
                                <td class="total">
                                    <label class="td-title">@T("Order.Product(s).Total"):</label>
                                    <span class="product-subtotal">@item.SubTotal</span>
                                </td>
                            </tr>
                        }
                    </tbody>
                </table>
            </div>

            <div class="section totals">
                <div class="total-info">
                    @await Html.PartialAsync("_OrderTotalDetails", totals)
                </div>
                @await Component.InvokeAsync("Widget", new { widgetZone = FiluetPublicWidgetZones.AfterTotalInfoOrderDetails })
                @if (!Model.PrintMode)
                {
                    <div class="actions">
                        @if (Model.IsReOrderAllowed)
                        {
                            <input type="button" value="@T("Order.Reorder")" class="button-1 re-order-button" onclick="setLocation('@Url.RouteUrl("ReOrder", new { orderId = Model.Id })    ')" />
                        }
                        @if (Model.IsReturnRequestAllowed)
                        {
                            <input type="button" value="@T("Order.ReturnItems")" class="button-2 return-items-button" onclick="setLocation('@Url.RouteUrl("ReturnRequest", new { orderId = Model.Id })    ')" />
                        }
                    </div>
                }
            </div>
        </div>
    </div>
</div>
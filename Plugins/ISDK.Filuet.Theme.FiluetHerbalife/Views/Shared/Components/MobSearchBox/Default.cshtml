@model SearchBoxModel
<div class="search">
    <form asp-route="ProductSearch" method="get" id="mob-small-search-box-form">
        @if (Model.ShowSearchBox)
        {
            <input type="text" 
                   class="input"
                   id="mob-small-searchterms"
                   autocomplete="off"
                   name="q"
                   placeholder="@T("Search.SearchBox.Tooltip")"
                   aria-label="@T("Search.SearchBox.Text.Label")" />

            @await Component.InvokeAsync(typeof(WidgetViewComponent), new { widgetZone = PublicWidgetZones.SearchBoxBeforeSearchButton, additionalData = Model })

            <button class="clear_btn">
                <svg class="icon" id="mob-small-searchterms">
                    <use xlink:href="@Url.Content("~/Themes/FiluetHerbalife/Content/images/sprite.svg#ic_close")">
                    </use>
                </svg>
            </button>

            <button type="submit" class="submit_btn">
                <svg class="icon">
                    <use xlink:href="@Url.Content("~/Themes/FiluetHerbalife/Content/images/sprite.svg#ic_search")">
                    </use>
                </svg>
            </button>

            <div class="tips" id="mob-tips">
            </div>

            @if (Model.SearchTermMinimumLength > 0)
            {
                <script asp-location="Footer">
                $("#mob-small-search-box-form").on("submit", function(event) {
                    if ($("#mob-small-searchterms").val() == "") {
                        alert('@Html.Raw(JavaScriptEncoder.Default.Encode(T("Search.EnterSearchTerms").Text))');
                        $("#mob-small-searchterms").focus();
                        event.preventDefault();
                    }
                });
                </script>
            }

            @if (Model.AutoCompleteEnabled)
            {
                <script asp-location="Footer">
                $(document).ready(function() {
                    var showLinkToResultSearch;
                    var searchText;
                    $('#mob-small-searchterms').autocomplete({
                        delay: 500,
                        minLength: @(Model.SearchTermMinimumLength.ToString()),
                        source: '@(Url.RouteUrl("ProductSearchAutoComplete"))',
                        appendTo: '#mob-tips',
                        select: function (event, ui) {
                            $("#mob-small-searchterms").val(ui.item.label);
                            setLocation(ui.item.producturl);
                            return false;
                        },
                        //append link to the end of list
                        open: function(event, ui) {
                            //display link to search page
                            if (showLinkToResultSearch) {
                                searchText = document.getElementById("mob-small-searchterms").value;
                                $(".ui-autocomplete").append("<a href=\"/search?q=" + searchText + "\" class=\"tip\">@T("Search.SearchBox.SearchPageLink")</a>");
                            }
                        }
                    })
                    .data("ui-autocomplete")._renderItem = function(ul, item) {
                        showLinkToResultSearch = item.showlinktoresultsearch;
                        //html encode
                        var t = htmlEncode(item.label);
                        return $("<a class=\"tip\"><span>" + t + "</span></a>")
                            .appendTo(ul);
                    };
                });
                </script>
            }

            @await Component.InvokeAsync(typeof(WidgetViewComponent), new { widgetZone = PublicWidgetZones.SearchBox, additionalData = Model })
        }
    </form>
</div>